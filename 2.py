## Project Euler
## Problem 2
##
## Each new term in the Fibonacci sequence is generated by
## adding the previous two terms. By starting with 1 and 2,
## the first 10 terms will be:
## 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
##
## By considering the terms in the Fibonacci sequence whose
## values do not exceed four million, find the sum of the even-valued terms.

import math

# http://en.wikipedia.org/wiki/Fibonacci_number
# Sum of even-valued terms starting with F(0) = 1, F(1) = 2:
#   Every third, starting with ix=1, is even (F(3i + 1))
#   sum(F(3i+1), 0<=i<n) == (F(n+2)-1)/2

val = 4000000
g = (1.0 + math.sqrt(5)) / 2 # Golden ratio


def fib(n):
  """ Closed form of nth Fibonacci number """
  return int(((g**n) - ((1-g)**n)) / math.sqrt(5))


def ix_of_fib(f):
  return int(math.log(f * math.sqrt(5) + 0.5, g))

import time
ix = ix_of_fib(val)
print ix
start = time.time()

ans = (fib(int(ix) + 2) - 1)/2
end = time.time()

print "Euler answer is:", ans #, end-start
